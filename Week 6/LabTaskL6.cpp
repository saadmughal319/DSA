/*                                          Lab Task:
Using singly linked list, write a menu driven program to perform push or pop operation on stack
The program should have following menu.

-	1 for push
-	2 for pop
-	3 for display stack elements
-	4 for exit

Note: The program should also display a message if stack has no element

*/
#include <iostream>
using namespace std;

struct node
{
    char item;
    node *next;
};

class Stack
{
private:
    node *top; // Pointer to the top of the stack

public:
    Stack();         // Constructor to initialize the stack
    ~Stack();        // destructor to deallocate the memory
    void push(char); // Push an item onto the stack
    char pop();      // Pop an item from the stack and return it
    bool isEmpty();  // Check if the stack is empty
    void display();
};
Stack::Stack()
{
    top = NULL;
}
Stack::~Stack()
{
    node *temp;
    while (top != NULL)
    {
        temp = top;
        top = top->next;
        delete temp;
    }
}
bool Stack::isEmpty()
{
    return top == NULL;
}
void Stack::push(char data)
{
    node *newNode = new node; // Dynamically allocate memory
    newNode->item = data;
    newNode->next = top; // Link new node to the previous top
    top = newNode;       // Update top pointer
}
char Stack::pop()
{
    if (isEmpty())
    {
        cout << "Stack is Empty: Can't Delete" << endl;
        return '\0'; // indicate failure
    }
    else
    {
        char item = top->item;
        node *temp = top;
        top = top->next; // updating top to the next node afte delteing
        delete temp;     // deleting memory of the popped node
        return item;
    }
}
void Stack::display()
{
    if (isEmpty())
    {
        cout << "Stack is Empty" << endl;
        return;
    }
    node *temp=top;
    while (temp != NULL)
    {
        cout<<temp->item<<endl;
        temp=temp->next;
    }
}
int main()
{
    Stack stack; 
    int choice;
    char data;

    do
    {
        // Display menu(Format Generated by chat gpt)
        cout << "\n********* STACK OPERATIONS *********\n";
        cout << "1. Push an element onto the stack\n";
        cout << "2. Pop an element from the stack\n";
        cout << "3. Display Stack Elements\n";
        cout << "4. Exit\n";
        cout << "*************************************\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter a character to push: ";
            cin >> data;
            stack.push(data);
            cout << "'" << data << "' pushed onto the stack.\n";
            break;

        case 2:
            data = stack.pop();
            if (data != '\0') // '\0' indicates an empty stack
                cout << "'" << data << "' popped from the stack.\n";
            break;

        case 3:
            stack.display();
            break;

        case 4:
            cout << "Exiting... Goodbye!\n";
            break;

        default:
            cout << "Invalid choice! Please select a valid option.\n";
        }
    } while (choice != 4);

    return 0;
}
