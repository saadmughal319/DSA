/*                              Lab Task

Convert the above given program to pointer based stack.
And also create ‘StackADT’ which must include pop, push,
emptystack and fullstack operations. Use sub function to
implement the ‘StackADT’.*/
#include <iostream>
using namespace std;

struct node
{
    char item;
    node *next;
};

class Stack
{
private:
    node *top; // Pointer to the top of the stack

public:
    Stack();         // Constructor to initialize the stack
    void push(char); // Push an item onto the stack
    char pop();      // Pop an item from the stack and return it
    bool isEmpty();  // Check if the stack is empty
};

// Constructor to initialize an empty stack
Stack::Stack()
{
    top = NULL;
}
bool Stack::isEmpty()
{
    return top == NULL;
}
void Stack::push(char data)
{
    node *newNode = new node; // Dynamically allocate memory
    newNode->item = data;
    newNode->next = top; // Link new node to the previous top
    top = newNode;       // Update top pointer
}
char Stack::pop()
{
    if (isEmpty())
    {
        cout << "Stack is Empty: Can't Delete" << endl;
        return '\0'; // indicate failure
    }
    else
    {
        char item = top->item;
        node *temp = top;
        top = top->next; // updating top to the next node afte delteing
        delete temp;     // deleting memory of the popped node
        return item;
    }
}
int main()
{
    Stack stack; // Create an instance of the Stack
    int choice;
    char data;

    do
    {
        // Display menu(Format Generated by chat gpt)
        cout << "\n********* STACK OPERATIONS *********\n";
        cout << "1. Push an element onto the stack\n";
        cout << "2. Pop an element from the stack\n";
        cout << "3. Check if the stack is empty\n";
        cout << "4. Exit\n";
        cout << "*************************************\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter a character to push: ";
            cin >> data;
            stack.push(data);
            cout << "'" << data << "' pushed onto the stack.\n";
            break;

        case 2:
            data = stack.pop();
            if (data != '\0') // '\0' indicates an empty stack
                cout << "'" << data << "' popped from the stack.\n";
            break;

        case 3:
            if (stack.isEmpty())
                cout << "The stack is empty.\n";
            else
                cout << "The stack is not empty.\n";
            break;

        case 4:
            cout << "Exiting... Goodbye!\n";
            break;

        default:
            cout << "Invalid choice! Please select a valid option.\n";
        }
    } while (choice != 4);

    return 0;
}
